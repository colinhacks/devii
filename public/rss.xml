<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[SabioLog]]></title><description><![CDATA[SabioLog offers the latest insights in web and software development. Explore tutorials, coding best practices, and expert opinions.]]></description><link>https://sabiolog.dev</link><image><url>https://sabiolog.dev/icon.png</url><title>SabioLog</title><link>https://sabiolog.dev</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 19 Jun 2023 21:27:20 GMT</lastBuildDate><atom:link href="https://sabiolog.dev/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 08 Jun 2023 17:00:00 GMT</pubDate><copyright><![CDATA[2023 Michael Sage]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[michael.sage@sabiosol.com]]></managingEditor><webMaster><![CDATA[michael.sage@sabiosol.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[Exploring Deno: A Modern JavaScript Runtime]]></title><description><![CDATA[<h1 id="whatisdeno">What is Deno?</h1>
<p>Deno is a modern JavaScript runtime built on the V8 JavaScript engine, the same engine that powers Google Chrome. It was created by Ryan Dahl, the original creator of Node.js, with the goal of addressing some of the limitations and design choices of Node.js. Deno provides a secure and efficient environment for running JavaScript and TypeScript applications.</p>
<h1 id="whatarethestandoutcharacteristicsofdeno">What are the stand-out characteristics of Deno?</h1>
<p>Deno comes with several stand-out characteristics that differentiate it from other JavaScript runtimes:</p>
<ol>
<li><p><strong>Security:</strong> Deno focuses on providing a secure runtime environment by default. It implements a permission-based model where access to resources like the file system, network, and environment variables needs to be explicitly granted. This approach enhances the security of applications and reduces the risk of potential vulnerabilities.</p></li>
<li><p><strong>TypeScript support:</strong> Deno has built-in support for TypeScript, a statically typed superset of JavaScript. This allows developers to write and run TypeScript code directly without the need for additional transpilation steps. Deno also includes a TypeScript compiler, making it seamless to work with TypeScript projects.</p></li>
<li><p><strong>Module management:</strong> Deno offers a decentralized module system. Modules can be imported directly from URLs, enabling easy sharing and referencing of remote dependencies without relying on a centralized package manager like npm. This approach simplifies dependency management and reduces the complexity of project setups.</p></li>
<li><p><strong>Built-in tools:</strong> Deno includes several built-in tools that facilitate development, testing, and debugging. It comes with a built-in runtime inspector, a test runner, and a code formatter. These tools enhance productivity and provide a seamless development experience.</p></li>
</ol>
<h1 id="whenshouldiconsiderdeno">When should I consider Deno?</h1>
<p>Deno can be a suitable choice in several scenarios:</p>
<ul>
<li><p><strong>Greenfield projects:</strong> If you're starting a new project and have the flexibility to choose a JavaScript runtime, Deno can be a compelling option. Its modern features, security focus, and TypeScript support make it a good fit for building robust and secure applications from scratch.</p></li>
<li><p><strong>TypeScript projects:</strong> If you're already working with TypeScript, Deno provides a seamless development experience. Its built-in TypeScript support eliminates the need for additional tooling and simplifies the development workflow.</p></li>
<li><p><strong>Security-conscious applications:</strong> If security is a top priority for your application, Deno's default security model and permission-based approach can offer peace of mind. It provides granular control over access to resources, reducing the risk of security vulnerabilities.</p></li>
<li><p><strong>Microservices and serverless architectures:</strong> Deno's module system, built-in tools, and lightweight nature make it well-suited for microservices and serverless architectures. Its decentralized module management simplifies dependency management in distributed systems.</p></li>
</ul>
<h1 id="differencesindenonodeandbun">Differences in Deno, Node, and Bun</h1>
<p>Deno, Node.js, and Bun are all JavaScript runtimes, but they differ in several aspects. Here's a comparison of the key differences between these technologies:</p>
<p>|                      | Deno                                  | Node.js                             | Bun                                   |
|----------------------|---------------------------------------|------------------------------------|----------------------------------------|
| Security Model       | Permission-based security model       | No built-in security model        | No built-in security model             |
| TypeScript Support   | Built-in TypeScript support            | Requires transpilation for TypeScript code | No built-in TypeScript support |
| Module Management    | Decentralized module system            | Centralized package manager (npm) | Centralized package manager (npm)       |
| Built-in Tools       | Includes built-in tools (runtime inspector, test runner, code formatter) | Limited built-in tools        | Limited built-in tools                  |</p>
<p>It's important to assess your project's specific requirements and considerations when choosing between Deno, Node.js, and Bun. Each technology has its strengths and use cases, and selecting the right one depends on factors such as security needs, existing codebase, and ecosystem compatibility.</p>
<p>By understanding the characteristics and differences of Deno, Node.js, and Bun, you can make an informed decision regarding their suitability for your specific project requirements.</p>
<hr />
<p>I hope you find this blog post informative and engaging. If you have any further questions, please refer to the FAQ section below.</p>
<h2 id="frequentlyaskedquestionsfaqs">Frequently Asked Questions (FAQs)</h2>
<p><strong>Q1. Can I run Node.js code in Deno?</strong>
A: Deno is not compatible with Node.js modules out of the box. However, there are third-party tools and libraries available that allow you to run Node.js code within the Deno runtime.</p>
<p><strong>Q2. Is Deno backward compatible with Node.js?</strong>
A: Deno is not backward compatible with Node.js due to several design differences and architectural choices. Porting existing Node.js applications to Deno may require code modifications and adjustments.</p>
<p><strong>Q3. Does Deno have a package manager like npm?</strong>
A: Deno has a decentralized module system that allows you to import modules directly from URLs. It does not rely on a centralized package manager like npm. However, there are third-party tools like "deno.land/x" that provide a centralized repository for Deno modules.</p>
<p><strong>Q4. Can I use Deno for production applications?</strong>
A: Yes, Deno can be used for production applications. It has matured significantly since its initial release and is being adopted by companies and developers worldwide. However, as with any technology, it's important to evaluate your specific use case, requirements, and ecosystem support before making a decision.</p>
<p><strong>Q5. What are some notable companies using Deno?</strong>
A: Several notable companies and projects are using Deno in their tech stacks. Some examples include Oak, a middleware framework for Deno; Drash, a REST API framework for Deno; and Fossil, a distributed version control system. These projects showcase the growing adoption and potential of Deno in real-world applications.</p>]]></description><link>https://sabiolog.dev/blog/exploring-deno-a-modern-javascript-runtime</link><guid isPermaLink="true">https://sabiolog.dev/blog/exploring-deno-a-modern-javascript-runtime</guid><category><![CDATA[Deno]]></category><category><![CDATA[JavaScript]]></category><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Michael Sage]]></dc:creator><pubDate>Thu, 08 Jun 2023 19:46:43 GMT</pubDate></item><item><title><![CDATA[Devii's killer features]]></title><description><![CDATA[<p>This page is built with Devii! Check out the source code for this under <code>/md/blog/test.md</code>.</p>
<p>Devii is a starter kit for building a personal website with the best tools 2020 has to offer.</p>
<ul>
<li><strong>Markdown-based</strong>: Just add a Markdown file to <code>/md/blog</code> to add a new post to your blog!</li>
<li><strong>TypeScript + React</strong>: aside from the parts that are rendered Markdown, everything else is fully built with TypeScript and functional React components. Implementing any sort of interactive widget is often hard using existing Markdown-centric static-site generators, but Devii makes it easy to mix Markdown and React on the same page.</li>
<li><strong>Frontmatter support</strong>: Every post can include a frontmatter block containing metadata: <code>title</code>, <code>subtitle</code>, <code>datePublished</code> (timestamp), <code>author</code>, <code>authorPhoto</code>, and <code>bannerPhoto</code>.</li>
<li><strong>Medium-inspired styles</strong>: The Markdown renderer (<code>Markdown.tsx</code>) contains default styles inspired by Medium.</li>
<li><strong>Static generation</strong>: you can generate a fully static version of your site using <code>yarn build &amp;&amp; yarn export</code>. Powered by Next.js.</li>
<li><strong>GitHub-style code blocks</strong>: with syntax highlighting powered by <a href="https://github.com/conorhastings/react-syntax-highlighter">react-syntax-highlighter</a>. Works out-of-the-box for all programming languages. Just use Markdown's triple backtick syntax with a "language identifier", <a href="https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks">just like GitHub</a>.</li>
</ul>
<pre><code class="ts language-ts">  // pretty neat huh?
  const test: (arg: string) =&gt; boolean = (arg) =&gt; {
    return arg.length &gt; 5;
  };
</code></pre>
<ul>
<li><strong>Utterly customizable</strong>: We provide a minimal interface to get you started, but you can customize every aspect of the rendering and styling by just modifying <code>index.tsx</code> (the home page), <code>BlogPost.tsx</code> (the blog post template), and <code>Markdown.tsx</code> (the Markdown renderer). And of course you can add entirely new pages as well!</li>
</ul>
<p>Head to the GitHub repo to get started: <a href="https://github.com/colinhacks/devii">https://github.com/colinhacks/devii</a>. If you like this project, leave a ⭐️star⭐️ to help more people find Devii 😎</p>]]></description><link>https://sabiolog.dev/blog/devii</link><guid isPermaLink="true">https://sabiolog.dev/blog/devii</guid><category><![CDATA[Devii]]></category><category><![CDATA[Blogs]]></category><dc:creator><![CDATA[Ben Bitdiddle]]></dc:creator><pubDate>Sat, 09 May 2020 22:48:42 GMT</pubDate></item><item><title><![CDATA[Using Tailwind CSS: Empowering Web Design with Utility-First Framework]]></title><description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Tailwind CSS has gained significant popularity in the web development community as a utility-first CSS framework. In this article, we will explore the potential of Tailwind CSS, when it is the preferred choice over other libraries, popular examples of its usage, and a comparison between Tailwind CSS, Bootstrap, Material UI, and Styled Components.</p>
<h2 id="whatistailwindcss">What is Tailwind CSS?</h2>
<p>Tailwind CSS is a utility-first CSS framework that provides a comprehensive set of utility classes for building user interfaces. Unlike traditional frameworks that come with pre-designed components, Tailwind CSS focuses on providing a range of atomic utility classes that can be combined to create custom designs. It offers a flexible and efficient approach to styling web applications, giving developers full control over the design without writing custom CSS.</p>
<h2 id="whenshouldiusetailwindcssinsteadofanotherlibrary">When should I use Tailwind CSS instead of another library?</h2>
<p>Tailwind CSS is a suitable choice in several scenarios:</p>
<ol>
<li><p>Custom Design Requirements: If you have specific design requirements that don't align with the pre-built components of other libraries, Tailwind CSS allows you to create unique designs by composing utility classes.</p></li>
<li><p>Rapid Prototyping: Tailwind CSS's utility-first approach enables quick prototyping. It provides a wide range of pre-defined utility classes that can be easily applied to elements, making it ideal for rapidly iterating on designs.</p></li>
<li><p>Highly Customizable Design Systems: When you need to create a highly customizable design system, Tailwind CSS shines. Its utility classes allow for easy modifications, making it easier to maintain consistency throughout the project.</p></li>
<li><p>Small Bundle Size: Tailwind CSS's modular approach ensures that only the CSS classes you use are included in the final build, resulting in a smaller bundle size compared to frameworks with predefined components.</p></li>
</ol>
<h2 id="whataresomepopularexamplesofusingtailwindcss">What are some popular examples of using Tailwind CSS?</h2>
<p>Tailwind CSS has been adopted by numerous companies and projects for its flexibility and ease of use. Here are a few popular examples:</p>
<ol>
<li><p>Laravel: The Laravel PHP framework's official documentation and starter kits utilize Tailwind CSS for its utility-first approach, enabling developers to rapidly build interfaces.</p></li>
<li><p>Vercel: Vercel, a leading platform for deploying frontend applications, embraces Tailwind CSS in their design system. It showcases the power of Tailwind CSS in creating a consistent and scalable UI across their products.</p></li>
<li><p>PostHog: PostHog, an open-source product analytics platform, employs Tailwind CSS to craft its user interface. The framework's flexibility allows for seamless customization and accelerates development.</p></li>
</ol>
<p>These examples demonstrate the versatility and adoption of Tailwind CSS across a range of projects and industries.</p>
<h2 id="differencesintailwindcssbootstrapmaterialuiandstyledcomponents">Differences in Tailwind CSS, Bootstrap, Material UI, and Styled Components</h2>
<p>Here's a comparison between Tailwind CSS, Bootstrap, Material UI, and Styled Components, highlighting their distinctive features:</p>
<p>| Framework             | Tailwind CSS                 | Bootstrap                    | Material UI                  | Styled Components            |
| --------------------- | ---------------------------- | ---------------------------- | ---------------------------- | ---------------------------- |
| Approach              | Utility-First                | Component-Based              | Component-Based              | CSS-in-JS                    |
| Design Flexibility    | High                         | Medium                       | Medium                       | High                         |
| Learning Curve        | Moderate                     | Moderate                     | Moderate                     | Moderate                     |
| Customization         | Extensive                    | Limited                      | Extensive                    | Extensive                    |
| Bundle Size           | Smaller                      | Larger                       | Larger                       | Larger                       |
| Ecosystem Support     | Growing                      | Mature                       | Growing                      | Growing                      |</p>
<p>Each framework has its strengths and areas of focus. Tailwind CSS offers unparalleled flexibility and customization, while Bootstrap and Material UI provide a wide range of pre-designed components. Styled Components, on the other hand, embraces CSS-in-JS, offering a seamless integration of styles within component files.</p>
<p>When choosing a framework, consider your project requirements, design preferences, and development workflow to select the most suitable option.</p>]]></description><link>https://sabiolog.dev/blog/using-tailwind-css</link><guid isPermaLink="true">https://sabiolog.dev/blog/using-tailwind-css</guid><category><![CDATA[Tailwind CSS]]></category><category><![CDATA[Web Development]]></category><category><![CDATA[CSS Framework]]></category><dc:creator><![CDATA[Michael Sage]]></dc:creator><pubDate>Tue, 20 Jan 1970 09:55:31 GMT</pubDate></item><item><title><![CDATA[Choosing a tech stack for my personal dev blog in 2020]]></title><description><![CDATA[<blockquote>
  <p>Originally published at <a href="https://colinhacks.com/essays/devii">https://colinhacks.com/essays/devii</a>. Check out the HN <del>roast</del> discussion <a href="https://news.ycombinator.com/item?id=23309002">here</a>! 🤗</p>
</blockquote>
<p>I recently set out to build my personal website — the one you're reading now, as it happens!</p>
<p>Surprisingly, it was much harder than expected to put together a "tech stack" that met my criteria. My criteria are pretty straightforward; I would expect most React devs to have a similar list. Yet it was surprisingly hard to put all these pieces together.</p>
<p>Given the lack of a decent out-of-the-box solution, I worry that many developers are settling for static-site generators that place limits on the interactivity and flexibility of your website. We can do better.</p>
<blockquote>
  <p>Clone the repo here to get started with this setup: https://github.com/colinhacks/devii</p>
</blockquote>
<p>Let's quickly run through my list of design goals:</p>
<h3 id="reacttypescript">React (+ TypeScript)</h3>
<p>I want to build the site with React and TypeScript. I love them both wholeheartedly, I use them for my day job, and they're gonna be around for a long time. Plus writing untyped JS makes me feel dirty.</p>
<p>I don't want limitations on what my personal website can be/become. Sure, at present my site consists of two simple, static blog posts. But down the road, I may want to build a page that contains an interactive visualization, a filterable table, or a demo of a React component I'm open-sourcing. Even something simple (like the email newsletter signup form at the bottom of this page) was much more pleasant to implement in React; how did we use to build forms again?</p>
<p>Plus: I want access to the npm ecosystem and all my favorite UI, animation, and styling libraries. I sincerely hope I never write another line of raw CSS ever again; CSS-in-JS 4 lyfe baby. If you want to start a Twitter feud with me about this, by all means <a href="https://twitter.com/colinhacks">at me</a>.</p>
<h3 id="goodauthoringexperience">Good authoring experience</h3>
<p>If it's obnoxious to write new blog posts, I won't do it. That's a regrettable law of the universe. Even writing blog posts with plain HTML — just a bunch of <code>&lt;p&gt;</code> tags in a div — is just annoying enough to bug me. The answer: Markdown of course!</p>
<p>Static site generators (SSGs) like Hugo and Jekyll provide an undeniably wonderful authoring experience. All you have to do is <code>touch</code> a new .md file in the proper directory and get to writing. Unfortunately all Markdown-based SSGs I know of are too restrictive. Mixing React and Markdown on the same page is either impossible or tricky. If it's possible, it likely requires some plugin/module/extension, config file, blob of boilerplate, or egregious hack. Sorry Hugo, I'm not going to re-write my React code using <code>React.createElement</code> like it's 2015.</p>
<p>Well, that doesn't work for me. I want my website to be React-first, with a sprinkling of Markdown when it makes my life easier.</p>
<h3 id="staticgeneration">Static generation</h3>
<p>As much as I love the Jamstack, it doesn't cut it from an SEO perspective. Many blogs powered by a "headless CMS" require two round trips before rendering the blog content (one to fetch the static JS bundle and another to fetch the blog content from a CMS). This degrades page load speeds and user experience, which accordingly degrades your rankings on Google.</p>
<p>Instead I want every page of my site to be pre-rendered to a set of fully static assets, so I can deploy them to a CDN and get fast page loads everywhere. You could get the same benefits with server-side rendering, but that requires an actual server and worldwide load balancing to achieve comparable page load speeds. I love overengineering things as much as the next guy, even I have a line. 😅</p>
<h2 id="mysolution">My solution</h2>
<p>I describe my final architecture design below, along with my rationale for each choice. I distilled this setup into a website starter/boilerplate available here: https://github.com/colinhacks/devii. Below, I allude to certain files/functions I implemented; to see the source code of these, just clone the repo <code>git clone git@github.com:colinhacks/devii.git</code></p>
<h3 id="nextjs">Next.js</h3>
<p>I chose to build my site with Next.js. This won't be a surprising decision to anyone who's played with statically-rendered or server-side rendered React in recent years. Next.js is quickly eating everyone else's lunch in this market, especially Gatsby's (sorry Gatsby fans).</p>
<p>Next.js is by far the most elegant way (for now) to do any static generation or server-side rendering with React. They just released their next-generation (pun intended) static site generator in the <a href="https://nextjs.org/blog/next-9-3">9.3 release</a> back in March. So in the spirit of using technologies <a href="https://www.youtube.com/watch?v=eBAX8MbRYFA">in the spring of their life</a>, Next.js is a no-brainer.</p>
<p>Here's a quick breakdown of the project structure. No need to understand every piece of it; but it may be useful to refer to throughout the rest of this post.</p>
<pre><code>.
├── README.md
├── public // all static files (images, etc) go here
├── pages // every .tsx component in this dir becomes a page of the final site
|   ├── index.tsx // the home page (which has access to the list of all blog posts)
|   ├── blog
|       ├── [blog].md // a template component that renders the blog posts under `/md/blog`
├── md
|   ├── blog
|       ├── devii.md // this page!
        ├── whatever.md // every MD file in this directory becomes a blog post
├── components
|   ├── Code.tsx
|   ├── Markdown.tsx
|   ├── &lt;various others&gt;
├── loader.ts // contains utility functions for loading/parsing Markdown
├── node_modules
├── tsconfig.json
├── package.json
├── next.config.js
├── next-env.d.ts
├── .gitignore
</code></pre>
<!-- Check out the Next.js documentation [here](https://nextjs.org/docs) to make sure it's the right choice for your project. -->
<h3 id="typescriptreact">TypeScript + React</h3>
<p>Both React and TypeScript are baked into the DNA of Next.js, so you get these for free when you set up a Next.js project.</p>
<p>Gatsby, on the other hand, has a special plugin for TypeScript support, but it's not officially supported and seems to be <a href="https://github.com/gatsbyjs/gatsby/issues/18983">low on their priority list</a>. Also, after messing with it for an hour I couldn't get it to play nice with hot reload.</p>
<h3 id="markdownauthoring">Markdown authoring</h3>
<p>Using Next's special <code>getStaticProps</code> hook and glorious <a href="https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr">dynamic imports</a>, it's trivial to a Markdown file and pass its contents into your React components as a prop. This achieves the holy grail I was searching for: the ability to easily mix React and Markdown.</p>
<h4 id="frontmattersupport">Frontmatter support</h4>
<p>Every Markdown file can include a "frontmatter block" containing metadata. I implemented a simple utility function (<code>loadPost</code>) that loads a Markdown file, parses its contents, and returns a TypeScript object with the following signature:</p>
<pre><code class="ts language-ts">type PostData = {
  path: string; // the relative URL to this page, can be used as an href
  content: string; // the body of the MD file
  title?: string;
  subtitle?: string;
  date?: number;
  author?: string;
  authorPhoto?: string;
  authorTwitter?: string;
  tags?: string[];
  bannerPhoto?: string;
  thumbnailPhoto?: string;
};
</code></pre>
<p>I implemented a separate function <code>loadPosts</code> that loads <em>all</em> the Markdown files under <code>/md/blog</code> and returns them as an array (<code>PostData[]</code>). I use <code>loadPosts</code> on this site's home page to render a list of all posts I've written.</p>
<h3 id="mediuminspireddesign">Medium-inspired design</h3>
<p>I used the wonderful <a href="https://github.com/rexxars/react-markdown"><code>react-markdown</code></a> package to render Markdown as a React component. My Markdown rendered component (<code>/components/Markdown.tsx</code>) provides some default styles inspired by Medium's design. Just modify the <code>style</code> pros in <code>Markdown.tsx</code> to customize the design to your liking.</p>
<h3 id="githubstylecodeblocks">GitHub-style code blocks</h3>
<p>You can easily drop code blocks into your blog posts using triple-backtick syntax. Specify the programming language with a "language tag", <a href="https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks">just like GitHub</a>!</p>
<p>To achieve this I implemented a custom <code>code</code> renderer (<code>/components/Code.tsx</code>) for <code>react-markdown</code> that uses <a href="https://github.com/conorhastings/react-syntax-highlighter#readme">react-syntax-highlighter</a> to handle the highlighting. So this:</p>
<!-- I landed on this solution after wasting hours playing with other options. CodeMirror has bad React support (the only React wrapper for it is inauspiciously named `react-codemirror2`) and [bizarre selection issues](https://github.com/codemirror/CodeMirror/issues/1099) for `readonly` code blocks. The popular `highlight.js` project requires you to [initialize the library](https://github.com/highlightjs/highlight.js/issues/925) in `componentDidMount` like its 2015 :/  -->
<pre><pre><code class="ts language-ts">// pretty neat huh?
const test = (arg: string) =&gt; {
  return arg.length &gt; 5;
};
</code></pre></pre>
<p>turns into this:</p>
<pre><code class="ts language-ts">// pretty neat huh?
const test = (arg: string) =&gt; {
  return arg.length &gt; 5;
};
</code></pre>
<h3 id="rssfeedgeneration">RSS feed generation</h3>
<p>An RSS feed is auto-generated from your blog post feed. This feed is generated using the <code>rss</code> module (for converting JSON to RSS format) and <code>showdown</code> for converting the markdown files to RSS-compatible HTML. The feed is generated during the build step and written as a static file to <code>/rss.xml</code> in your static assets folder. It's dead simple. That's the joy of being able to easily write custom build scripts on top of Next.js's <code>getStaticProps</code> hooks!</p>
<h3 id="seo">SEO</h3>
<p>Every blog post page automatically populated meta tags based on the post metadata. This includes a <code>title</code> tag, <code>meta</code> tags, <code>og:</code> tags, Twitter metadata, and a <code>link</code> tag containing the canonical URL. You can modify/augment this in the <code>PostMeta.ts</code> component.</p>
<h3 id="staticgeneration-1">Static generation</h3>
<p>You can generate a fully static version of your site using <code>yarn build &amp;&amp; yarn export</code>. This step is entirely powered by Next.js. The static site is exported to the <code>out</code> directory.</p>
<p>After its generated, use your static file hosting service of choice (Firebase Hosting, Vercel, Netlify) to deploy your site.</p>
<h3 id="insanelycustomizable">Insanely customizable</h3>
<p>There's nothing "under the hood" here. You can view and modify all the files that provide the functionality described above. Devii just provides a project scaffold, some Markdown-loading loading utilities (in <code>loader.ts</code>), and some sensible styling defaults (especially in <code>Markdown.tsx</code>).</p>
<p>To start customizing, modify <code>index.tsx</code> (the home page), <code>Essay.tsx</code> (the blog post template), and <code>Markdown.tsx</code> (the Markdown renderer).</p>
<h2 id="getstarted">Get started</h2>
<p>Head to the GitHub repo to get started: <a href="https://github.com/colinhacks/devii">https://github.com/colinhacks/devii</a>. If you like this project, leave a ⭐️star⭐️ to help more people find Devii! 😎</p>
<p>To jump straight into the code, clone the repo and start the development server like so:</p>
<pre><code class="bash language-bash">git clone git@github.com:colinhacks/devii.git mysite
cd mysite
yarn
yarn dev
</code></pre>]]></description><link>https://sabiolog.dev/blog/the-ultimate-tech-stack</link><guid isPermaLink="true">https://sabiolog.dev/blog/the-ultimate-tech-stack</guid><category><![CDATA[Static Site Generators]]></category><category><![CDATA[React]]></category><category><![CDATA[Next.js]]></category><dc:creator><![CDATA[Colin McDonnell]]></dc:creator><pubDate>Thu, 01 Jan 1970 05:36:40 GMT</pubDate></item></channel></rss>